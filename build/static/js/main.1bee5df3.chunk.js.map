{"version":3,"sources":["logo.svg","api/items.js","components/Product/Product.js","components/Cart/CartItem/CartItem.js","components/Cart/Cart.js","components/CheckoutForm/CheckoutForm.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","id","title","price","category","Product","onAddToCartClick","className","onClick","CartItem","cost","quantity","toFixed","Cart","itemsInCart","totalCost","length","map","item","key","injectStripe","stripe","useState","status","setStatus","onSubmit","e","a","async","preventDefault","createToken","name","token","fetch","method","body","JSON","stringify","amount","ok","Error","type","disabled","Boolean","window","location","hostname","match","ReactDOM","render","setItemsInCart","reduce","acc","src","logo","alt","items","itemInCart","find","apiKey","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bee5df3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default [\r\n    {\r\n      id: 1,\r\n      title: 'Shenmue',\r\n      price: 50,\r\n      category: 'Dreamcast',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Sonic Adventure',\r\n      price: 25,\r\n      category: 'Dreamcast',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Soul Calibur',\r\n      price: 30,\r\n      category: 'Dreamcast',\r\n    },\r\n  ];","import React from 'react';\r\nimport './Product.css';\r\n\r\nexport default function Product({ onAddToCartClick, price, title }) {\r\n  return (\r\n    <div className=\"Product\">\r\n      <h2 className=\"Product-title\">{title}</h2>\r\n      <div className=\"Product-price\">${price}</div>\r\n      <button className=\"Product-buy-button\" onClick={onAddToCartClick}>\r\n        Add to cart\r\n      </button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './CartItem.css';\r\n\r\nexport default function CartItem({ title, cost, quantity }) {\r\n  return (\r\n    <div className=\"CartItem\">\r\n      <div>{title}</div>\r\n      <div className=\"CartItem-details\">\r\n        <div className=\"CartItem-quantity\">Qty: {quantity}</div>\r\n        <div>${cost.toFixed(2)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport CartItem from './CartItem/CartItem';\r\nimport './Cart.css';\r\n\r\nexport default function Cart({ itemsInCart, totalCost }) {\r\n  return (\r\n    <div className=\"Cart\">\r\n      <h2 className=\"Cart-title\">Your shopping cart</h2>\r\n      {itemsInCart.length > 0 ? (\r\n        <div>\r\n          {itemsInCart.map(item => (\r\n            <CartItem\r\n              key={item.id}\r\n              title={item.title}\r\n              cost={item.price * item.quantity}\r\n              quantity={item.quantity}\r\n            />\r\n          ))}\r\n          <div className=\"Cart-total-cost\">\r\n            Total cost: ${totalCost.toFixed(2)}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>Your cart is empty</div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { CardElement, injectStripe } from 'react-stripe-elements';\r\nimport './CheckoutForm.css';\r\n\r\nfunction CheckoutForm({ stripe, totalCost }) {\r\n  const [status, setStatus] = useState('default');\r\n\r\n  const submit = async e => {\r\n    e.preventDefault();\r\n\r\n    setStatus('submitting');\r\n\r\n    try {\r\n      let { token } = await stripe.createToken({ name: 'Name' });\r\n\r\n      let response = await fetch('/.netlify/functions/charge', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          amount: totalCost * 100,\r\n          token: token.id,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setStatus('complete');\r\n      } else {\r\n        throw new Error('Network response was not ok.');\r\n      }\r\n    } catch (err) {\r\n      setStatus('error');\r\n    }\r\n  };\r\n\r\n  if (status === 'complete') {\r\n    return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\r\n  }\r\n\r\n  return (\r\n    <form className=\"CheckoutForm\" onSubmit={submit}>\r\n      <h4>Would you like to complete the purchase?</h4>\r\n      <CardElement />\r\n      <button\r\n        className=\"CheckoutForm-button\"\r\n        type=\"submit\"\r\n        disabled={status === 'submitting'}\r\n      >\r\n        {status === 'submitting' ? 'Submitting' : 'Submit Order'}\r\n      </button>\r\n      {status === 'error' && (\r\n        <div className=\"CheckoutForm-error\">Something went wrong.</div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default injectStripe(CheckoutForm);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport { Elements, StripeProvider } from 'react-stripe-elements';\nimport items from './api/items';\nimport Product from './components/Product/Product';\nimport Cart from './components/Cart/Cart';\nimport CheckoutForm from './components/CheckoutForm/CheckoutForm';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport default function App() {\n  const [itemsInCart, setItemsInCart] = useState([]);\n\n  const handleAddToCartClick = id => {\n    setItemsInCart(itemsInCart => {\n      const itemInCart = itemsInCart.find(item => item.id === id);\n\n      // if item is already in cart, update the quantity\n      if (itemInCart) {\n        return itemsInCart.map(item => {\n          if (item.id !== id) return item;\n          return { ...itemInCart, quantity: item.quantity + 1 };\n        });\n      }\n\n      // otherwise, add new item to cart\n      const item = items.find(item => item.id === id);\n      return [...itemsInCart, { ...item, quantity: 1 }];\n    });\n  };\n\n  const totalCost = itemsInCart.reduce(\n    (acc, item) => acc + item.price * item.quantity,\n    0\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-header-text\">Dreamcast Shop</h1>\n      </header>\n      <main className=\"App-shop\">\n        <div className=\"App-products\">\n          {items.map(item => (\n            <Product\n              key={item.title}\n              title={item.title}\n              price={item.price}\n              onAddToCartClick={() => handleAddToCartClick(item.id)}\n            />\n          ))}\n        </div>\n        <Cart itemsInCart={itemsInCart} totalCost={totalCost} />\n        {itemsInCart.length > 0 && (\n        <StripeProvider apiKey=\"pk_test_hP6viEqQ3X9X6kzZ9S2wwIrn00iJXevrAO\">\n          <Elements>\n            <CheckoutForm totalCost={totalCost} />\n          </Elements>\n        </StripeProvider>\n)}\n      </main>\n    </div>\n  );\n}"],"sourceRoot":""}